{"version":3,"sources":["helpers/randomBytes.ts","components/Meeting.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomBytes","length","bytes","Uint8Array","crypto","getRandomValues","Array","from","map","byte","toString","padStart","join","peerId","textDecoder","TextDecoder","Meeting","meetingHash","useParams","useState","peers","setPeers","message","setMessage","messages","setMessages","useEffect","client","BittorrentTracker","infoHash","announce","announceList","on","peer","console","log","id","error","data","decode","start","stop","Object","keys","placeholder","value","onChange","event","target","onClick","preventDefault","values","forEach","send","i","newMeetingHash","App","setMeetingHash","basename","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f8df53c.chunk.js","sourcesContent":["export default function randomBytes(length: number) {\n  const bytes = new Uint8Array(length)\n  crypto.getRandomValues(bytes)\n  return Array.from(bytes)\n    .map((byte) => byte.toString(16).padStart(2, '0'))\n    .join('')\n}\n","import BittorrentTracker from 'bittorrent-tracker'\nimport { announceList } from 'create-torrent'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport randomBytes from '../helpers/randomBytes'\nimport { Peer } from '../types/peer'\nimport './Meeting.css'\n\nconst peerId = randomBytes(20)\nconst textDecoder = new TextDecoder('utf-8')\n\nexport default function Meeting() {\n  const { meetingHash } = useParams<{ meetingHash: string }>()\n  const [peers, setPeers] = useState<{ [peerId: string]: Peer }>({})\n  const [message, setMessage] = useState<string>('')\n  const [messages, setMessages] = useState<string[]>([])\n\n  useEffect(() => {\n    const client = new BittorrentTracker({\n      peerId,\n      infoHash: meetingHash,\n      announce: announceList,\n    })\n\n    client.on('peer', (peer: Peer) => {\n      console.log('Peer found', peer)\n\n      peer.on('connect', () => {\n        console.log('New peer connected', peer)\n        setPeers((peers) => ({ ...peers, [peer.id]: peer }))\n      })\n\n      peer.on('close', () => {\n        console.log('Peer disconnected', peer)\n        setPeers((peers) => {\n          const { [peer.id]: removedPeer, ...remaingPeers } = peers\n          return remaingPeers\n        })\n      })\n\n      peer.on('error', (error) => {\n        console.log('Peer error', error, peer)\n      })\n\n      peer.on('data', (data) => {\n        setMessages((messages) => [...messages, textDecoder.decode(data)])\n      })\n    })\n\n    client.start()\n    return () => client.stop()\n  }, [meetingHash])\n\n  return (\n    <div>\n      <div>Meeting hash: {meetingHash}</div>\n      <div>Peers connected: {Object.keys(peers).length + 1}</div>\n      <form>\n        <input\n          placeholder=\"Message\"\n          value={message}\n          onChange={(event) => setMessage(event.target.value)}\n        />\n        <button\n          onClick={(event) => {\n            event.preventDefault()\n            Object.values(peers).forEach((peer) => peer.send(message))\n            setMessages((messages) => [...messages, message])\n            setMessage('')\n          }}\n        >\n          Send\n        </button>\n      </form>\n      {messages.map((message, i) => (\n        <div key={i}>{message}</div>\n      ))}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Link,\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport './App.css'\nimport Meeting from './components/Meeting'\nimport randomBytes from './helpers/randomBytes'\n\nconst newMeetingHash = randomBytes(20)\n\nexport default function App() {\n  const [meetingHash, setMeetingHash] = useState('')\n\n  return (\n    <Router basename=\"/meettorrent\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Link to={`/${newMeetingHash}`}>New meeting</Link>\n          <input\n            placeholder=\"Past meeting hash\"\n            value={meetingHash}\n            onChange={(event) => setMeetingHash(event.target.value)}\n          />\n          {meetingHash && <Link to={`/${meetingHash}`}>Join</Link>}\n        </Route>\n        <Route path=\"/:meetingHash([0-9a-f]{40})\">\n          <Meeting />\n        </Route>\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}